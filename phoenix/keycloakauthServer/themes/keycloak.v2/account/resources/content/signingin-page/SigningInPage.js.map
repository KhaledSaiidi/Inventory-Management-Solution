{"version":3,"file":"SigningInPage.js","names":["React","withRouter","Alert","Button","DataList","DataListAction","DataListItemCells","DataListCell","DataListItem","DataListItemRow","EmptyState","EmptyStateVariant","EmptyStateBody","Split","SplitItem","Title","Dropdown","DropdownPosition","KebabToggle","PageSection","PageSectionVariants","AIACommand","TimeUtil","AccountServiceContext","ContinueCancelModal","Msg","ContentPage","ContentAlert","KeycloakContext","SigningInPage","Component","constructor","props","context","credentialId","userLabel","doDelete","encodeURIComponent","then","getCredentialContainers","success","state","credentialContainers","Map","doGet","response","allContainers","containers","data","forEach","container","categoryMap","get","category","set","type","setState","credElementId","credType","credId","item","substring","render","renderCategories","Array","from","keys","map","light","renderTypes","credTypeMap","keycloak","index","typeArray","renderCredTypeTitle","renderUserCredentials","renderEmptyRow","isLast","credContainer","userCredentialMetadatas","removeable","displayName","length","localizedDisplayName","localize","xs","credentialMetadata","credential","hasOwnProperty","createdDate","strCreatedDate","format","updateAIA","updateAction","maxWidth","infoMessage","warningMessageTitle","warningMessageDescription","JSON","parse","key","parameters","id","credentialRowCells","handleRemove","credMetadata","credRowCells","push","setupAction","createAction","credContainerDisplayName","helptext","right","isOpen","open","execute","CredentialAction","credRemover","SigningInPageWithRouter"],"sources":["../../../src/app/content/signingin-page/SigningInPage.tsx"],"sourcesContent":["/*\n * Copyright 2018 Red Hat, Inc. and/or its affiliates.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport * as React from \"react\";\n\nimport { withRouter, RouteComponentProps } from \"react-router-dom\";\nimport {\n    Alert,\n    Button,\n    DataList,\n    DataListAction,\n    DataListItemCells,\n    DataListCell,\n    DataListItem,\n    DataListItemRow,\n    EmptyState,\n    EmptyStateVariant,\n    EmptyStateBody,\n    Split,\n    SplitItem,\n    Title,\n    Dropdown,\n    DropdownPosition,\n    KebabToggle,\n    PageSection,\n    PageSectionVariants\n} from \"@patternfly/react-core\";\n\nimport { AIACommand } from \"../../util/AIACommand\";\nimport TimeUtil from \"../../util/TimeUtil\";\nimport {\n    HttpResponse,\n    AccountServiceClient,\n} from \"../../account-service/account.service\";\nimport { AccountServiceContext } from \"../../account-service/AccountServiceContext\";\nimport { ContinueCancelModal } from \"../../widgets/ContinueCancelModal\";\nimport { Features } from \"../../widgets/features\";\nimport { Msg } from \"../../widgets/Msg\";\nimport { ContentPage } from \"../ContentPage\";\nimport { ContentAlert } from \"../ContentAlert\";\nimport { KeycloakContext } from \"../../keycloak-service/KeycloakContext\";\nimport { KeycloakService } from \"../../keycloak-service/keycloak.service\";\nimport { css } from \"@patternfly/react-styles\";\n\ndeclare const features: Features;\n\ninterface PasswordDetails {\n    registered: boolean;\n    lastUpdate: number;\n}\n\ntype CredCategory = \"password\" | \"two-factor\" | \"passwordless\";\ntype CredType = string;\ntype CredTypeMap = Map<CredType, CredentialContainer>;\ntype CredContainerMap = Map<CredCategory, CredTypeMap>;\n\ninterface CredMetadata {\n    infoMessage?: string;\n    warningMessageTitle?: string;\n    warningMessageDescription?: string;\n    credential: UserCredential;\n}\n\ninterface UserCredential {\n    id: string;\n    type: string;\n    userLabel: string;\n    createdDate?: number;\n    strCreatedDate?: string;\n    credentialData?: string;\n}\n\n// A CredentialContainer is unique by combo of credential type and credential category\ninterface CredentialContainer {\n    category: CredCategory;\n    type: CredType;\n    displayName: string;\n    helptext?: string;\n    createAction?: string;\n    updateAction?: string;\n    removeable: boolean;\n    userCredentialMetadatas: CredMetadata[];\n    open: boolean;\n}\n\ninterface SigningInPageProps extends RouteComponentProps {}\n\ninterface SigningInPageState {\n    // Credential containers organized by category then type\n    credentialContainers: CredContainerMap;\n}\n\n/**\n * @author Stan Silvert ssilvert@redhat.com (C) 2018 Red Hat Inc.\n */\nclass SigningInPage extends React.Component<\n    SigningInPageProps,\n    SigningInPageState\n> {\n    static contextType = AccountServiceContext;\n    context: React.ContextType<typeof AccountServiceContext>;\n\n    public constructor(\n        props: SigningInPageProps,\n        context: React.ContextType<typeof AccountServiceContext>\n    ) {\n        super(props);\n        this.context = context;\n\n        this.state = {\n            credentialContainers: new Map(),\n        };\n\n        this.getCredentialContainers();\n    }\n\n    private getCredentialContainers(): void {\n        this.context!.doGet(\"/credentials\").then(\n            (response: HttpResponse<CredentialContainer[]>) => {\n                const allContainers: CredContainerMap = new Map();\n                const containers: CredentialContainer[] = response.data || [];\n                containers.forEach((container) => {\n                    let categoryMap = allContainers.get(container.category);\n                    if (!categoryMap) {\n                        categoryMap = new Map();\n                        allContainers.set(container.category, categoryMap);\n                    }\n                    categoryMap.set(container.type, container);\n                });\n\n                this.setState({ credentialContainers: allContainers });\n            }\n        );\n    }\n\n    private handleRemove = (credentialId: string, userLabel: string) => {\n        this.context!.doDelete(\"/credentials/\" + encodeURIComponent(credentialId)).then(() => {\n            this.getCredentialContainers();\n            ContentAlert.success(\"successRemovedMessage\", [userLabel]);\n        });\n    };\n\n    public static credElementId(\n        credType: CredType,\n        credId: string,\n        item: string\n    ): string {\n        return `${credType}-${item}-${credId.substring(0, 8)}`;\n    }\n\n    public render(): React.ReactNode {\n        return (\n            <ContentPage title=\"signingIn\" introMessage=\"signingInSubMessage\">\n                {this.renderCategories()}\n            </ContentPage>\n        );\n    }\n\n    private renderCategories(): React.ReactNode {\n      return Array.from(this.state.credentialContainers.keys()).map(\n          (category) => (\n            <PageSection key={category} variant={PageSectionVariants.light}>\n              <Title\n                  id={`${category}-categ-title`}\n                  headingLevel=\"h2\"\n                  size=\"xl\"\n              >\n                <Msg msgKey={category} />\n              </Title>\n              {this.renderTypes(category!)}\n            </PageSection>\n         )\n       ) \n    }\n\n    private renderTypes(category: CredCategory): React.ReactNode {\n        let credTypeMap: CredTypeMap = this.state.credentialContainers.get(\n            category\n        )!;\n\n        return (\n            <KeycloakContext.Consumer>\n                {(keycloak) => (\n                    <>\n                        {Array.from(\n                            credTypeMap.keys()\n                        ).map(\n                            (\n                                credType: CredType,\n                                index: number,\n                                typeArray: string[]\n                            ) => [\n                                this.renderCredTypeTitle(\n                                    credTypeMap.get(credType)!,\n                                    keycloak!,\n                                    category\n                                ),\n                                this.renderUserCredentials(\n                                    credTypeMap,\n                                    credType,\n                                    keycloak!\n                                ),\n                            ]\n                        )}\n                    </>\n                )}\n            </KeycloakContext.Consumer>\n        );\n    }\n\n    private renderEmptyRow(type: string, isLast: boolean): React.ReactNode {\n        if (isLast) return; // don't put empty row at the end\n\n        return (\n            <DataListItem aria-labelledby={\"empty-list-item-\" + type}>\n                <DataListItemRow key={\"empty-row-\" + type}>\n                    <DataListItemCells\n                        dataListCells={[<DataListCell></DataListCell>]}\n                    />\n                </DataListItemRow>\n            </DataListItem>\n        );\n    }\n\n    private renderUserCredentials(\n        credTypeMap: CredTypeMap,\n        credType: CredType,\n        keycloak: KeycloakService\n    ): React.ReactNode {\n        const credContainer: CredentialContainer = credTypeMap.get(credType)!;\n        const userCredentialMetadatas: CredMetadata[] = credContainer.userCredentialMetadatas;\n        const removeable: boolean = credContainer.removeable;\n        const type: string = credContainer.type;\n        const displayName: string = credContainer.displayName;\n\n        if (!userCredentialMetadatas || userCredentialMetadatas.length === 0) {\n            const localizedDisplayName = Msg.localize(displayName);\n            return (\n              <DataList aria-label={Msg.localize('notSetUp', [localizedDisplayName])} className=\"pf-u-mb-xl\">\n                <DataListItem key='no-credentials-list-item' aria-labelledby={Msg.localize('notSetUp', [localizedDisplayName])}>\n                    <DataListItemRow key='no-credentials-list-item-row' className=\"pf-u-align-items-center\">\n                        <DataListItemCells\n                            dataListCells={[\n                                <DataListCell key={'no-credentials-cell-0'}/>,\n                                <EmptyState id={`${type}-not-set-up`} key={'no-credentials-cell-1'} variant={EmptyStateVariant.xs}>\n                                    <EmptyStateBody>\n                                        <Msg msgKey='notSetUp' params={[localizedDisplayName]}/>\n                                    </EmptyStateBody>\n                                </EmptyState>,\n                                <DataListCell key={'no-credentials-cell-2'}/>\n                            ]}/>\n                    </DataListItemRow>\n                </DataListItem>\n              </DataList>\n            );\n        }\n\n        userCredentialMetadatas.forEach(credentialMetadata => {\n            let credential = credentialMetadata.credential;\n            if (!credential.userLabel) credential.userLabel = Msg.localize(credential.type);\n            if (credential.hasOwnProperty('createdDate') && credential.createdDate && credential.createdDate! > 0) {\n                credential.strCreatedDate = TimeUtil.format(credential.createdDate as number);\n            }\n        });\n\n        let updateAIA: AIACommand;\n        if (credContainer.updateAction) {\n            updateAIA = new AIACommand(keycloak, credContainer.updateAction);\n        }\n\n        let maxWidth = { maxWidth: 689 } as React.CSSProperties;\n\n        return (\n            <React.Fragment key='userCredentialMetadatas'> {\n                userCredentialMetadatas.map(credentialMetadata => (\n                  <>\n                    {(credentialMetadata.infoMessage && !credentialMetadata.warningMessageTitle && !credentialMetadata.warningMessageDescription) && \n                      <Alert variant=\"default\" className=\"pf-u-mb-md\" isInline isPlain title={Msg.localize(JSON.parse(credentialMetadata.infoMessage).key, JSON.parse(credentialMetadata.infoMessage).parameters)} />\n                    }\n                    {(credentialMetadata.warningMessageTitle && credentialMetadata.warningMessageDescription) &&\n                      <Alert variant=\"warning\" className=\"pf-u-mb-md\" isInline title={Msg.localize(JSON.parse(credentialMetadata.warningMessageTitle).key, JSON.parse(credentialMetadata.warningMessageTitle).parameters)} style={maxWidth}>\n                                \n                        <p>{Msg.localize(JSON.parse(credentialMetadata.warningMessageDescription).key, JSON.parse(credentialMetadata.warningMessageDescription).parameters)}</p>\n                      </Alert>\n                    }\n                    <DataList aria-label=\"user credential\" className=\"pf-u-mb-xl\">\n                      <DataListItem id={`${SigningInPage.credElementId(type, credentialMetadata.credential.id, 'row')}`} key={'credential-list-item-' + credentialMetadata.credential.id} aria-labelledby={'credential-list-item-' + credentialMetadata.credential.userLabel}>\n                          <DataListItemRow key={'userCredentialRow-' + credentialMetadata.credential.id} className=\"pf-u-align-items-center\">\n                              <DataListItemCells dataListCells={this.credentialRowCells(credentialMetadata, type)}/>\n                              <CredentialAction\n                                credential={credentialMetadata.credential}\n                                removeable={removeable}\n                                updateAction={updateAIA}\n                                credRemover={this.handleRemove}\n                              />\n                          </DataListItemRow>\n                      </DataListItem>\n                    </DataList>\n                  </>\n                ))\n            } </React.Fragment>\n        )\n    }\n\n    private credentialRowCells(credMetadata: CredMetadata, type: string): React.ReactNode[] {\n        const credRowCells: React.ReactNode[] = [];\n        const credential = credMetadata.credential;\n        let maxWidth = { \"--pf-u-max-width--MaxWidth\": \"300px\" } as React.CSSProperties;\n        credRowCells.push(\n            <DataListCell id={`${SigningInPage.credElementId(type, credential.id, 'label')}`} key={'userLabel-' + credential.id} className=\"pf-u-max-width\" style={maxWidth}>\n                {credential.userLabel}\n            </DataListCell>\n        );\n        if (credential.strCreatedDate) {\n            credRowCells.push(\n                <DataListCell\n                    id={`${SigningInPage.credElementId(\n                        type,\n                        credential.id,\n                        \"created-at\"\n                    )}`}\n                    key={\"created-\" + credential.id}\n                >\n                    <strong className=\"pf-u-mr-md\">\n                        <Msg msgKey=\"credentialCreatedAt\" />{\" \"}\n                    </strong>\n                    {credential.strCreatedDate}\n                </DataListCell>\n            );\n            credRowCells.push(<DataListCell key={\"spacer-\" + credential.id} />);\n        }\n\n        return credRowCells;\n    }\n\n    private renderCredTypeTitle(\n        credContainer: CredentialContainer,\n        keycloak: KeycloakService,\n        category: CredCategory\n    ): React.ReactNode {\n      \n        if (\n            !credContainer.hasOwnProperty(\"helptext\") &&\n            !credContainer.hasOwnProperty(\"createAction\")\n        )\n            return;\n\n        let setupAction: AIACommand;\n        if (credContainer.createAction) {\n            setupAction = new AIACommand(keycloak, credContainer.createAction);\n        }\n\n        const credContainerDisplayName: string = Msg.localize(\n            credContainer.displayName\n        );\n        return (\n            <React.Fragment key={\"credTypeTitle-\" + credContainer.type}>\n                <Split className=\"pf-u-mt-lg pf-u-mb-lg\">\n                    <SplitItem>\n                        <Title\n                            headingLevel=\"h3\"\n                            size=\"md\"\n                            className=\"pf-u-mb-md\"\n                        >\n                            <span className=\"cred-title pf-u-display-block\" id={`${credContainer.type}-cred-title`}>\n                                <Msg msgKey={credContainer.displayName} />\n                            </span>\n                        </Title>\n                        <span id={`${credContainer.type}-cred-help`}>\n                            {credContainer.helptext && (\n                                <Msg msgKey={credContainer.helptext} />\n                            )}\n                        </span>\n                    </SplitItem>\n\n                    <SplitItem isFilled>\n                        {credContainer.createAction && (\n                            <div\n                                id={\"mob-setUpAction-\" + credContainer.type}\n                                className=\"pf-u-display-none-on-lg pf-u-float-right\"\n                            >\n                                <Dropdown\n                                    isPlain\n                                    position={DropdownPosition.right}\n                                    toggle={\n                                        <KebabToggle\n                                            onToggle={(isOpen) => {\n                                                credContainer.open = isOpen;\n                                                this.setState({\n                                                    credentialContainers: new Map(\n                                                        this.state.credentialContainers\n                                                    ),\n                                                });\n                                            }}\n                                        />\n                                    }\n                                    isOpen={credContainer.open}\n                                    dropdownItems={[\n                                        <button\n                                            id={`mob-${credContainer.type}-set-up`}\n                                            className=\"pf-c-button pf-m-link\"\n                                            type=\"button\"\n                                            onClick={() =>\n                                                setupAction.execute()\n                                            }\n                                        >\n                                            <span className=\"pf-c-button__icon\">\n                                                <i\n                                                    className=\"fa fa-plus-circle\"\n                                                    aria-hidden=\"true\"\n                                                ></i>\n                                            </span>\n                                            <Msg\n                                                msgKey=\"setUpNew\"\n                                                params={[\n                                                    credContainerDisplayName,\n                                                ]}\n                                            />\n                                        </button>,\n                                    ]}\n                                />\n                            </div>\n                        )}\n                        {credContainer.createAction && (\n                            <div\n                                id={\"setUpAction-\" + credContainer.type}\n                                className=\"pf-u-display-none pf-u-display-inline-flex-on-lg pf-u-float-right\"\n                            >\n                                <button\n                                    id={`${credContainer.type}-set-up`}\n                                    className=\"pf-c-button pf-m-link\"\n                                    type=\"button\"\n                                    onClick={() => setupAction.execute()}\n                                >\n                                    <span className=\"pf-c-button__icon\">\n                                        <i\n                                            className=\"fa fa-plus-circle\"\n                                            aria-hidden=\"true\"\n                                        ></i>\n                                    </span>\n                                    <Msg\n                                        msgKey=\"setUpNew\"\n                                        params={[credContainerDisplayName]}\n                                    />\n                                </button>\n                            </div>\n                        )}\n                    </SplitItem>\n                </Split>\n            </React.Fragment>\n        );\n    }\n}\n\ntype CredRemover = (credentialId: string, userLabel: string) => void;\ninterface CredentialActionProps {\n    credential: UserCredential;\n    removeable: boolean;\n    updateAction: AIACommand;\n    credRemover: CredRemover;\n};\n\nclass CredentialAction extends React.Component<CredentialActionProps> {\n    render(): React.ReactNode {\n        if (this.props.updateAction) {\n            return (\n                <DataListAction\n                    aria-labelledby={Msg.localize('updateCredAriaLabel')}\n                    aria-label={Msg.localize('updateCredAriaLabel')}\n                    id={\"updateAction-\" + this.props.credential.id}\n                >\n                    <Button\n                        variant=\"secondary\"\n                        id={`${SigningInPage.credElementId(\n                            this.props.credential.type,\n                            this.props.credential.id,\n                            \"update\"\n                        )}`}\n                        onClick={() => this.props.updateAction.execute()}\n                    >\n                        <Msg msgKey=\"update\" />\n                    </Button>\n                </DataListAction>\n            );\n        }\n\n        if (this.props.removeable) {\n            const userLabel: string = this.props.credential.userLabel;\n            return (\n                <DataListAction\n                  aria-label={Msg.localize('removeCredAriaLabel')}\n                  aria-labelledby={Msg.localize('removeCredAriaLabel')}\n                  id={'removeAction-' + this.props.credential.id }\n                >\n                    <ContinueCancelModal \n                        buttonTitle='remove'\n                        buttonVariant='danger'\n                        buttonId={`${SigningInPage.credElementId(this.props.credential.type, this.props.credential.id, 'remove')}`}\n                        modalTitle={Msg.localize('removeCred', [userLabel])}\n                        modalMessage={Msg.localize('stopUsingCred', [userLabel])}\n                        onContinue={() => this.props.credRemover(this.props.credential.id, userLabel)}\n                    />\n                </DataListAction>\n            );\n        }\n\n        return <></>;\n    }\n}\n\nconst SigningInPageWithRouter = withRouter(SigningInPage);\nexport { SigningInPageWithRouter as SigningInPage };\n"],"mappings":";;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA,OAAO,KAAKA,KAAZ;AAEA,SAASC,UAAT;AACA,SACIC,KADJ,EAEIC,MAFJ,EAGIC,QAHJ,EAIIC,cAJJ,EAKIC,iBALJ,EAMIC,YANJ,EAOIC,YAPJ,EAQIC,eARJ,EASIC,UATJ,EAUIC,iBAVJ,EAWIC,cAXJ,EAYIC,KAZJ,EAaIC,SAbJ,EAcIC,KAdJ,EAeIC,QAfJ,EAgBIC,gBAhBJ,EAiBIC,WAjBJ,EAkBIC,WAlBJ,EAmBIC,mBAnBJ;AAsBA,SAASC,UAAT;AACA,OAAOC,QAAP;AAKA,SAASC,qBAAT;AACA,SAASC,mBAAT;AAEA,SAASC,GAAT;AACA,SAASC,WAAT;AACA,SAASC,YAAT;AACA,SAASC,eAAT;;AAoDA;AACA;AACA;AACA,MAAMC,aAAN,SAA4B7B,KAAK,CAAC8B,SAAlC,CAGE;EAISC,WAAW,CACdC,KADc,EAEdC,OAFc,EAGhB;IACE,MAAMD,KAAN;;IADF;;IAAA,sCA8BqB,CAACE,YAAD,EAAuBC,SAAvB,KAA6C;MAChE,KAAKF,OAAL,CAAcG,QAAd,CAAuB,kBAAkBC,kBAAkB,CAACH,YAAD,CAA3D,EAA2EI,IAA3E,CAAgF,MAAM;QAClF,KAAKC,uBAAL;QACAZ,YAAY,CAACa,OAAb,CAAqB,uBAArB,EAA8C,CAACL,SAAD,CAA9C;MACH,CAHD;IAIH,CAnCC;;IAEE,KAAKF,OAAL,GAAeA,OAAf;IAEA,KAAKQ,KAAL,GAAa;MACTC,oBAAoB,EAAE,IAAIC,GAAJ;IADb,CAAb;IAIA,KAAKJ,uBAAL;EACH;;EAEOA,uBAAuB,GAAS;IACpC,KAAKN,OAAL,CAAcW,KAAd,CAAoB,cAApB,EAAoCN,IAApC,CACKO,QAAD,IAAmD;MAC/C,MAAMC,aAA+B,GAAG,IAAIH,GAAJ,EAAxC;MACA,MAAMI,UAAiC,GAAGF,QAAQ,CAACG,IAAT,IAAiB,EAA3D;MACAD,UAAU,CAACE,OAAX,CAAoBC,SAAD,IAAe;QAC9B,IAAIC,WAAW,GAAGL,aAAa,CAACM,GAAd,CAAkBF,SAAS,CAACG,QAA5B,CAAlB;;QACA,IAAI,CAACF,WAAL,EAAkB;UACdA,WAAW,GAAG,IAAIR,GAAJ,EAAd;UACAG,aAAa,CAACQ,GAAd,CAAkBJ,SAAS,CAACG,QAA5B,EAAsCF,WAAtC;QACH;;QACDA,WAAW,CAACG,GAAZ,CAAgBJ,SAAS,CAACK,IAA1B,EAAgCL,SAAhC;MACH,CAPD;MASA,KAAKM,QAAL,CAAc;QAAEd,oBAAoB,EAAEI;MAAxB,CAAd;IACH,CAdL;EAgBH;;EAS0B,OAAbW,aAAa,CACvBC,QADuB,EAEvBC,MAFuB,EAGvBC,IAHuB,EAIjB;IACN,OAAQ,GAAEF,QAAS,IAAGE,IAAK,IAAGD,MAAM,CAACE,SAAP,CAAiB,CAAjB,EAAoB,CAApB,CAAuB,EAArD;EACH;;EAEMC,MAAM,GAAoB;IAC7B,oBACI,oBAAC,WAAD;MAAa,KAAK,EAAC,WAAnB;MAA+B,YAAY,EAAC;IAA5C,GACK,KAAKC,gBAAL,EADL,CADJ;EAKH;;EAEOA,gBAAgB,GAAoB;IAC1C,OAAOC,KAAK,CAACC,IAAN,CAAW,KAAKxB,KAAL,CAAWC,oBAAX,CAAgCwB,IAAhC,EAAX,EAAmDC,GAAnD,CACFd,QAAD,iBACE,oBAAC,WAAD;MAAa,GAAG,EAAEA,QAAlB;MAA4B,OAAO,EAAEjC,mBAAmB,CAACgD;IAAzD,gBACE,oBAAC,KAAD;MACI,EAAE,EAAG,GAAEf,QAAS,cADpB;MAEI,YAAY,EAAC,IAFjB;MAGI,IAAI,EAAC;IAHT,gBAKE,oBAAC,GAAD;MAAK,MAAM,EAAEA;IAAb,EALF,CADF,EAQG,KAAKgB,WAAL,CAAiBhB,QAAjB,CARH,CAFC,CAAP;EAcD;;EAEOgB,WAAW,CAAChB,QAAD,EAA0C;IACzD,IAAIiB,WAAwB,GAAG,KAAK7B,KAAL,CAAWC,oBAAX,CAAgCU,GAAhC,CAC3BC,QAD2B,CAA/B;IAIA,oBACI,oBAAC,eAAD,CAAiB,QAAjB,QACMkB,QAAD,iBACG,0CACKP,KAAK,CAACC,IAAN,CACGK,WAAW,CAACJ,IAAZ,EADH,EAECC,GAFD,CAGG,CACIT,QADJ,EAEIc,KAFJ,EAGIC,SAHJ,KAIK,CACD,KAAKC,mBAAL,CACIJ,WAAW,CAAClB,GAAZ,CAAgBM,QAAhB,CADJ,EAEIa,QAFJ,EAGIlB,QAHJ,CADC,EAMD,KAAKsB,qBAAL,CACIL,WADJ,EAEIZ,QAFJ,EAGIa,QAHJ,CANC,CAPR,CADL,CAFR,CADJ;EA4BH;;EAEOK,cAAc,CAACrB,IAAD,EAAesB,MAAf,EAAiD;IACnE,IAAIA,MAAJ,EAAY,OADuD,CAC/C;;IAEpB,oBACI,oBAAC,YAAD;MAAc,mBAAiB,qBAAqBtB;IAApD,gBACI,oBAAC,eAAD;MAAiB,GAAG,EAAE,eAAeA;IAArC,gBACI,oBAAC,iBAAD;MACI,aAAa,EAAE,cAAC,oBAAC,YAAD,OAAD;IADnB,EADJ,CADJ,CADJ;EASH;;EAEOoB,qBAAqB,CACzBL,WADyB,EAEzBZ,QAFyB,EAGzBa,QAHyB,EAIV;IACf,MAAMO,aAAkC,GAAGR,WAAW,CAAClB,GAAZ,CAAgBM,QAAhB,CAA3C;IACA,MAAMqB,uBAAuC,GAAGD,aAAa,CAACC,uBAA9D;IACA,MAAMC,UAAmB,GAAGF,aAAa,CAACE,UAA1C;IACA,MAAMzB,IAAY,GAAGuB,aAAa,CAACvB,IAAnC;IACA,MAAM0B,WAAmB,GAAGH,aAAa,CAACG,WAA1C;;IAEA,IAAI,CAACF,uBAAD,IAA4BA,uBAAuB,CAACG,MAAxB,KAAmC,CAAnE,EAAsE;MAClE,MAAMC,oBAAoB,GAAG1D,GAAG,CAAC2D,QAAJ,CAAaH,WAAb,CAA7B;MACA,oBACE,oBAAC,QAAD;QAAU,cAAYxD,GAAG,CAAC2D,QAAJ,CAAa,UAAb,EAAyB,CAACD,oBAAD,CAAzB,CAAtB;QAAwE,SAAS,EAAC;MAAlF,gBACE,oBAAC,YAAD;QAAc,GAAG,EAAC,0BAAlB;QAA6C,mBAAiB1D,GAAG,CAAC2D,QAAJ,CAAa,UAAb,EAAyB,CAACD,oBAAD,CAAzB;MAA9D,gBACI,oBAAC,eAAD;QAAiB,GAAG,EAAC,8BAArB;QAAoD,SAAS,EAAC;MAA9D,gBACI,oBAAC,iBAAD;QACI,aAAa,EAAE,cACX,oBAAC,YAAD;UAAc,GAAG,EAAE;QAAnB,EADW,eAEX,oBAAC,UAAD;UAAY,EAAE,EAAG,GAAE5B,IAAK,aAAxB;UAAsC,GAAG,EAAE,uBAA3C;UAAoE,OAAO,EAAE5C,iBAAiB,CAAC0E;QAA/F,gBACI,oBAAC,cAAD,qBACI,oBAAC,GAAD;UAAK,MAAM,EAAC,UAAZ;UAAuB,MAAM,EAAE,CAACF,oBAAD;QAA/B,EADJ,CADJ,CAFW,eAOX,oBAAC,YAAD;UAAc,GAAG,EAAE;QAAnB,EAPW;MADnB,EADJ,CADJ,CADF,CADF;IAkBH;;IAEDJ,uBAAuB,CAAC9B,OAAxB,CAAgCqC,kBAAkB,IAAI;MAClD,IAAIC,UAAU,GAAGD,kBAAkB,CAACC,UAApC;MACA,IAAI,CAACA,UAAU,CAACpD,SAAhB,EAA2BoD,UAAU,CAACpD,SAAX,GAAuBV,GAAG,CAAC2D,QAAJ,CAAaG,UAAU,CAAChC,IAAxB,CAAvB;;MAC3B,IAAIgC,UAAU,CAACC,cAAX,CAA0B,aAA1B,KAA4CD,UAAU,CAACE,WAAvD,IAAsEF,UAAU,CAACE,WAAX,GAA0B,CAApG,EAAuG;QACnGF,UAAU,CAACG,cAAX,GAA4BpE,QAAQ,CAACqE,MAAT,CAAgBJ,UAAU,CAACE,WAA3B,CAA5B;MACH;IACJ,CAND;IAQA,IAAIG,SAAJ;;IACA,IAAId,aAAa,CAACe,YAAlB,EAAgC;MAC5BD,SAAS,GAAG,IAAIvE,UAAJ,CAAekD,QAAf,EAAyBO,aAAa,CAACe,YAAvC,CAAZ;IACH;;IAED,IAAIC,QAAQ,GAAG;MAAEA,QAAQ,EAAE;IAAZ,CAAf;IAEA,oBACI,oBAAC,KAAD,CAAO,QAAP;MAAgB,GAAG,EAAC;IAApB,QACIf,uBAAuB,CAACZ,GAAxB,CAA4BmB,kBAAkB,iBAC5C,0CACIA,kBAAkB,CAACS,WAAnB,IAAkC,CAACT,kBAAkB,CAACU,mBAAtD,IAA6E,CAACV,kBAAkB,CAACW,yBAAlG,iBACC,oBAAC,KAAD;MAAO,OAAO,EAAC,SAAf;MAAyB,SAAS,EAAC,YAAnC;MAAgD,QAAQ,MAAxD;MAAyD,OAAO,MAAhE;MAAiE,KAAK,EAAExE,GAAG,CAAC2D,QAAJ,CAAac,IAAI,CAACC,KAAL,CAAWb,kBAAkB,CAACS,WAA9B,EAA2CK,GAAxD,EAA6DF,IAAI,CAACC,KAAL,CAAWb,kBAAkB,CAACS,WAA9B,EAA2CM,UAAxG;IAAxE,EAFJ,EAIIf,kBAAkB,CAACU,mBAAnB,IAA0CV,kBAAkB,CAACW,yBAA9D,iBACC,oBAAC,KAAD;MAAO,OAAO,EAAC,SAAf;MAAyB,SAAS,EAAC,YAAnC;MAAgD,QAAQ,MAAxD;MAAyD,KAAK,EAAExE,GAAG,CAAC2D,QAAJ,CAAac,IAAI,CAACC,KAAL,CAAWb,kBAAkB,CAACU,mBAA9B,EAAmDI,GAAhE,EAAqEF,IAAI,CAACC,KAAL,CAAWb,kBAAkB,CAACU,mBAA9B,EAAmDK,UAAxH,CAAhE;MAAqM,KAAK,EAAEP;IAA5M,gBAEE,+BAAIrE,GAAG,CAAC2D,QAAJ,CAAac,IAAI,CAACC,KAAL,CAAWb,kBAAkB,CAACW,yBAA9B,EAAyDG,GAAtE,EAA2EF,IAAI,CAACC,KAAL,CAAWb,kBAAkB,CAACW,yBAA9B,EAAyDI,UAApI,CAAJ,CAFF,CALJ,eAUE,oBAAC,QAAD;MAAU,cAAW,iBAArB;MAAuC,SAAS,EAAC;IAAjD,gBACE,oBAAC,YAAD;MAAc,EAAE,EAAG,GAAExE,aAAa,CAAC4B,aAAd,CAA4BF,IAA5B,EAAkC+B,kBAAkB,CAACC,UAAnB,CAA8Be,EAAhE,EAAoE,KAApE,CAA2E,EAAhG;MAAmG,GAAG,EAAE,0BAA0BhB,kBAAkB,CAACC,UAAnB,CAA8Be,EAAhK;MAAoK,mBAAiB,0BAA0BhB,kBAAkB,CAACC,UAAnB,CAA8BpD;IAA7O,gBACI,oBAAC,eAAD;MAAiB,GAAG,EAAE,uBAAuBmD,kBAAkB,CAACC,UAAnB,CAA8Be,EAA3E;MAA+E,SAAS,EAAC;IAAzF,gBACI,oBAAC,iBAAD;MAAmB,aAAa,EAAE,KAAKC,kBAAL,CAAwBjB,kBAAxB,EAA4C/B,IAA5C;IAAlC,EADJ,eAEI,oBAAC,gBAAD;MACE,UAAU,EAAE+B,kBAAkB,CAACC,UADjC;MAEE,UAAU,EAAEP,UAFd;MAGE,YAAY,EAAEY,SAHhB;MAIE,WAAW,EAAE,KAAKY;IAJpB,EAFJ,CADJ,CADF,CAVF,CADF,CADJ,MADJ;EA8BH;;EAEOD,kBAAkB,CAACE,YAAD,EAA6BlD,IAA7B,EAA8D;IACpF,MAAMmD,YAA+B,GAAG,EAAxC;IACA,MAAMnB,UAAU,GAAGkB,YAAY,CAAClB,UAAhC;IACA,IAAIO,QAAQ,GAAG;MAAE,8BAA8B;IAAhC,CAAf;IACAY,YAAY,CAACC,IAAb,eACI,oBAAC,YAAD;MAAc,EAAE,EAAG,GAAE9E,aAAa,CAAC4B,aAAd,CAA4BF,IAA5B,EAAkCgC,UAAU,CAACe,EAA7C,EAAiD,OAAjD,CAA0D,EAA/E;MAAkF,GAAG,EAAE,eAAef,UAAU,CAACe,EAAjH;MAAqH,SAAS,EAAC,gBAA/H;MAAgJ,KAAK,EAAER;IAAvJ,GACKP,UAAU,CAACpD,SADhB,CADJ;;IAKA,IAAIoD,UAAU,CAACG,cAAf,EAA+B;MAC3BgB,YAAY,CAACC,IAAb,eACI,oBAAC,YAAD;QACI,EAAE,EAAG,GAAE9E,aAAa,CAAC4B,aAAd,CACHF,IADG,EAEHgC,UAAU,CAACe,EAFR,EAGH,YAHG,CAIL,EALN;QAMI,GAAG,EAAE,aAAaf,UAAU,CAACe;MANjC,gBAQI;QAAQ,SAAS,EAAC;MAAlB,gBACI,oBAAC,GAAD;QAAK,MAAM,EAAC;MAAZ,EADJ,EACyC,GADzC,CARJ,EAWKf,UAAU,CAACG,cAXhB,CADJ;MAeAgB,YAAY,CAACC,IAAb,eAAkB,oBAAC,YAAD;QAAc,GAAG,EAAE,YAAYpB,UAAU,CAACe;MAA1C,EAAlB;IACH;;IAED,OAAOI,YAAP;EACH;;EAEOhC,mBAAmB,CACvBI,aADuB,EAEvBP,QAFuB,EAGvBlB,QAHuB,EAIR;IAEf,IACI,CAACyB,aAAa,CAACU,cAAd,CAA6B,UAA7B,CAAD,IACA,CAACV,aAAa,CAACU,cAAd,CAA6B,cAA7B,CAFL,EAII;IAEJ,IAAIoB,WAAJ;;IACA,IAAI9B,aAAa,CAAC+B,YAAlB,EAAgC;MAC5BD,WAAW,GAAG,IAAIvF,UAAJ,CAAekD,QAAf,EAAyBO,aAAa,CAAC+B,YAAvC,CAAd;IACH;;IAED,MAAMC,wBAAgC,GAAGrF,GAAG,CAAC2D,QAAJ,CACrCN,aAAa,CAACG,WADuB,CAAzC;IAGA,oBACI,oBAAC,KAAD,CAAO,QAAP;MAAgB,GAAG,EAAE,mBAAmBH,aAAa,CAACvB;IAAtD,gBACI,oBAAC,KAAD;MAAO,SAAS,EAAC;IAAjB,gBACI,oBAAC,SAAD,qBACI,oBAAC,KAAD;MACI,YAAY,EAAC,IADjB;MAEI,IAAI,EAAC,IAFT;MAGI,SAAS,EAAC;IAHd,gBAKI;MAAM,SAAS,EAAC,+BAAhB;MAAgD,EAAE,EAAG,GAAEuB,aAAa,CAACvB,IAAK;IAA1E,gBACI,oBAAC,GAAD;MAAK,MAAM,EAAEuB,aAAa,CAACG;IAA3B,EADJ,CALJ,CADJ,eAUI;MAAM,EAAE,EAAG,GAAEH,aAAa,CAACvB,IAAK;IAAhC,GACKuB,aAAa,CAACiC,QAAd,iBACG,oBAAC,GAAD;MAAK,MAAM,EAAEjC,aAAa,CAACiC;IAA3B,EAFR,CAVJ,CADJ,eAkBI,oBAAC,SAAD;MAAW,QAAQ;IAAnB,GACKjC,aAAa,CAAC+B,YAAd,iBACG;MACI,EAAE,EAAE,qBAAqB/B,aAAa,CAACvB,IAD3C;MAEI,SAAS,EAAC;IAFd,gBAII,oBAAC,QAAD;MACI,OAAO,MADX;MAEI,QAAQ,EAAEtC,gBAAgB,CAAC+F,KAF/B;MAGI,MAAM,eACF,oBAAC,WAAD;QACI,QAAQ,EAAGC,MAAD,IAAY;UAClBnC,aAAa,CAACoC,IAAd,GAAqBD,MAArB;UACA,KAAKzD,QAAL,CAAc;YACVd,oBAAoB,EAAE,IAAIC,GAAJ,CAClB,KAAKF,KAAL,CAAWC,oBADO;UADZ,CAAd;QAKH;MARL,EAJR;MAeI,MAAM,EAAEoC,aAAa,CAACoC,IAf1B;MAgBI,aAAa,EAAE,cACX;QACI,EAAE,EAAG,OAAMpC,aAAa,CAACvB,IAAK,SADlC;QAEI,SAAS,EAAC,uBAFd;QAGI,IAAI,EAAC,QAHT;QAII,OAAO,EAAE,MACLqD,WAAW,CAACO,OAAZ;MALR,gBAQI;QAAM,SAAS,EAAC;MAAhB,gBACI;QACI,SAAS,EAAC,mBADd;QAEI,eAAY;MAFhB,EADJ,CARJ,eAcI,oBAAC,GAAD;QACI,MAAM,EAAC,UADX;QAEI,MAAM,EAAE,CACJL,wBADI;MAFZ,EAdJ,CADW;IAhBnB,EAJJ,CAFR,EAgDKhC,aAAa,CAAC+B,YAAd,iBACG;MACI,EAAE,EAAE,iBAAiB/B,aAAa,CAACvB,IADvC;MAEI,SAAS,EAAC;IAFd,gBAII;MACI,EAAE,EAAG,GAAEuB,aAAa,CAACvB,IAAK,SAD9B;MAEI,SAAS,EAAC,uBAFd;MAGI,IAAI,EAAC,QAHT;MAII,OAAO,EAAE,MAAMqD,WAAW,CAACO,OAAZ;IAJnB,gBAMI;MAAM,SAAS,EAAC;IAAhB,gBACI;MACI,SAAS,EAAC,mBADd;MAEI,eAAY;IAFhB,EADJ,CANJ,eAYI,oBAAC,GAAD;MACI,MAAM,EAAC,UADX;MAEI,MAAM,EAAE,CAACL,wBAAD;IAFZ,EAZJ,CAJJ,CAjDR,CAlBJ,CADJ,CADJ;EAgGH;;AAjWH;;gBAHIjF,a,iBAImBN,qB;;AAyWxB;;AAED,MAAM6F,gBAAN,SAA+BpH,KAAK,CAAC8B,SAArC,CAAsE;EAClEgC,MAAM,GAAoB;IACtB,IAAI,KAAK9B,KAAL,CAAW6D,YAAf,EAA6B;MACzB,oBACI,oBAAC,cAAD;QACI,mBAAiBpE,GAAG,CAAC2D,QAAJ,CAAa,qBAAb,CADrB;QAEI,cAAY3D,GAAG,CAAC2D,QAAJ,CAAa,qBAAb,CAFhB;QAGI,EAAE,EAAE,kBAAkB,KAAKpD,KAAL,CAAWuD,UAAX,CAAsBe;MAHhD,gBAKI,oBAAC,MAAD;QACI,OAAO,EAAC,WADZ;QAEI,EAAE,EAAG,GAAEzE,aAAa,CAAC4B,aAAd,CACH,KAAKzB,KAAL,CAAWuD,UAAX,CAAsBhC,IADnB,EAEH,KAAKvB,KAAL,CAAWuD,UAAX,CAAsBe,EAFnB,EAGH,QAHG,CAIL,EANN;QAOI,OAAO,EAAE,MAAM,KAAKtE,KAAL,CAAW6D,YAAX,CAAwBsB,OAAxB;MAPnB,gBASI,oBAAC,GAAD;QAAK,MAAM,EAAC;MAAZ,EATJ,CALJ,CADJ;IAmBH;;IAED,IAAI,KAAKnF,KAAL,CAAWgD,UAAf,EAA2B;MACvB,MAAM7C,SAAiB,GAAG,KAAKH,KAAL,CAAWuD,UAAX,CAAsBpD,SAAhD;MACA,oBACI,oBAAC,cAAD;QACE,cAAYV,GAAG,CAAC2D,QAAJ,CAAa,qBAAb,CADd;QAEE,mBAAiB3D,GAAG,CAAC2D,QAAJ,CAAa,qBAAb,CAFnB;QAGE,EAAE,EAAE,kBAAkB,KAAKpD,KAAL,CAAWuD,UAAX,CAAsBe;MAH9C,gBAKI,oBAAC,mBAAD;QACI,WAAW,EAAC,QADhB;QAEI,aAAa,EAAC,QAFlB;QAGI,QAAQ,EAAG,GAAEzE,aAAa,CAAC4B,aAAd,CAA4B,KAAKzB,KAAL,CAAWuD,UAAX,CAAsBhC,IAAlD,EAAwD,KAAKvB,KAAL,CAAWuD,UAAX,CAAsBe,EAA9E,EAAkF,QAAlF,CAA4F,EAH7G;QAII,UAAU,EAAE7E,GAAG,CAAC2D,QAAJ,CAAa,YAAb,EAA2B,CAACjD,SAAD,CAA3B,CAJhB;QAKI,YAAY,EAAEV,GAAG,CAAC2D,QAAJ,CAAa,eAAb,EAA8B,CAACjD,SAAD,CAA9B,CALlB;QAMI,UAAU,EAAE,MAAM,KAAKH,KAAL,CAAWqF,WAAX,CAAuB,KAAKrF,KAAL,CAAWuD,UAAX,CAAsBe,EAA7C,EAAiDnE,SAAjD;MANtB,EALJ,CADJ;IAgBH;;IAED,oBAAO,yCAAP;EACH;;AA7CiE;;AAgDtE,MAAMmF,uBAAuB,GAAGrH,UAAU,CAAC4B,aAAD,CAA1C;AACA,SAASyF,uBAAuB,IAAIzF,aAApC"}