services:
  mysql:
    image: mysql:8.0
    container_name: mysql
    hostname: mysql
    restart: unless-stopped
    environment:
      MYSQL_ROOT_PASSWORD: universalmm
      MYSQL_DATABASE: keycloakdb
      MYSQL_USER: universal
      MYSQL_PASSWORD: universal
    volumes:
      - mysql_data:/var/lib/mysql:rw
##      - ./keycloakdb.sql:/docker-entrypoint-initdb.d/keycloakdb.sql
      - ./init-db.sh:/docker-entrypoint-initdb.d/init-db.sh
    ports:
      - "3306:3306"
    networks:
      - universal-mm-net
    command: --default-authentication-plugin=mysql_native_password
    healthcheck:
      test: ["CMD-SHELL", "mysqladmin ping -u root -puniversalmm || exit 1"]
      interval: 30s
      timeout: 10s
      retries: 5

  keycloak:
    container_name: keycloak
    hostname: keycloak
    image: quay.io/keycloak/keycloak:21.1.1
    command: ["start-dev", "--http-port=8181", "--import-realm"]
    environment:
      - KEYCLOAK_ADMIN=admin
      - KEYCLOAK_ADMIN_PASSWORD=admin
      - KC_DB=mysql
      - KC_DB_USERNAME=root
      - KC_DB_PASSWORD=universalmm
      - KC_DB_URL=jdbc:mysql://mysql:3306/keycloakdb?useUnicode=true&characterEncoding=UTF-8&allowPublicKeyRetrieval=true
      - KC_DB_URL_HOST=mysql
      - KC_DB_URL_PORT=3306
      - KC_DB_SCHEMA=keycloakdb
    ports:
      - "8181:8181"
    networks:
      universal-mm-net:
        aliases:
          - keycloak
    volumes:
      - ./realms/:/opt/keycloak/data/import/
      - ./themes/:/opt/keycloak/themes/
    depends_on:
      mysql:
        condition: service_healthy

  zookeeper:
    image: wurstmeister/zookeeper
    container_name: zookeeper
    hostname: zookeeper
    ports:
      - "2181:2181"
    networks:
      - universal-mm-net

  kafka:
    image: wurstmeister/kafka
    depends_on:
      - zookeeper
    container_name: kafka
    hostname: kafka
    ports:
      - "9092:9092"
    networks:
      - universal-mm-net
    environment:
      KAFKA_ADVERTISED_HOST_NAME: kafka
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
      KAFKA_MESSAGE_MAX_BYTES: 200000000 # 200 MB
      KAFKA_REPLICA_FETCH_MAX_BYTES: 200000000 # 200 MB
      KAFKA_MAX_REQUEST_SIZE: 200000000 # 200 MB
    healthcheck:
      test: ["CMD-SHELL", "nc -z localhost 9092"]
      interval: 30s
      timeout: 10s
      retries: 10

  server-discovery:
    build:
      context: ./discovery-server
      dockerfile: Dockerfile
    container_name: server-discovery
    hostname: server-discovery
    ports:
      - "8761:8761"
    networks:
      universal-mm-net:
        aliases:
          - server-discovery

  configserver:
    build:
      context: ./config-server
      dockerfile: Dockerfile
    container_name: configserver
    hostname: configserver
    ports:
      - "8888:8888"
    networks:
      - universal-mm-net
    depends_on:
      keycloak:
        condition: service_started
      server-discovery:
        condition: service_started
      mysql:
        condition: service_healthy
      kafka:
        condition: service_healthy

  api-gateway:
    build:
      context: ./gateway
      dockerfile: Dockerfile
    container_name: api-gateway
    hostname: api-gateway
    ports:
      - "9000:9000"
    networks:
      - universal-mm-net
    depends_on:
      - configserver
      - server-discovery
      - keycloak

  keycloakuser-service:
    build:
      context: ./keycloakuser
      dockerfile: Dockerfile
    container_name: keycloakuser-service
    hostname: keycloakuser-service
    networks:
      - universal-mm-net
    depends_on:
      - configserver
      - api-gateway
      - server-discovery
      - keycloak

  notification-service:
    build:
      context: ./notification
      dockerfile: Dockerfile
    container_name: notification-service
    hostname: notification-service
    networks:
      - universal-mm-net
    depends_on:
      - configserver
      - api-gateway
      - server-discovery
      - keycloak

  stock-service:
    build:
      context: ./stock
      dockerfile: Dockerfile
    container_name: stock-service
    hostname: stock-service
    networks:
      - universal-mm-net
    depends_on:
      - configserver
      - api-gateway
      - server-discovery
      - keycloak

  frontapp:
    build:
      context: ./phoenixfront
      dockerfile: Dockerfile
    container_name: frontapp
    hostname: frontapp
    environment:
      NPM_CONFIG_TIMEOUT: 100000
      KEYCLOAK_URL: http://keycloak:8181
      API_URL: http://api-gateway:9000
    ports:
      - "4200:80"
    networks:
      - universal-mm-net
    depends_on:
      keycloak:
        condition: service_started
      api-gateway:
        condition: service_started

volumes:
  mysql_data:

networks:
  universal-mm-net:
    driver: bridge