{"version":3,"file":"LinkedAccountsPage.js","names":["React","withRouter","Button","DataList","DataListAction","DataListItemCells","DataListCell","DataListItemRow","Label","PageSection","PageSectionVariants","Split","SplitItem","Stack","StackItem","Title","DataListItem","BitbucketIcon","CubeIcon","GitlabIcon","LinkIcon","OpenshiftIcon","PaypalIcon","UnlinkIcon","FacebookIcon","GoogleIcon","InstagramIcon","MicrosoftIcon","TwitterIcon","StackOverflowIcon","LinkedinIcon","GithubIcon","AccountServiceContext","Msg","ContentPage","createRedirect","LinkedAccountsPage","Component","constructor","props","context","state","linkedAccounts","unLinkedAccounts","getLinkedAccounts","doGet","then","response","console","log","data","filter","account","connected","setState","unLinkAccount","url","providerName","doDelete","linkAccount","redirectUri","location","pathname","params","providerId","window","href","accountLinkUri","render","localize","light","makeRows","emptyRow","isLinked","isEmptyMessage","accounts","length","map","providerAlias","findIcon","displayName","label","linkedUsername","social","socialIconId","toLowerCase","includes","LinkedAccountsPagewithRouter"],"sources":["../../../src/app/content/linked-accounts-page/LinkedAccountsPage.tsx"],"sourcesContent":["/*\n * Copyright 2019 Red Hat, Inc. and/or its affiliates.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport * as React from 'react';\nimport {withRouter, RouteComponentProps} from 'react-router-dom';\n\nimport {\n    Button,\n    DataList,\n    DataListAction,\n    DataListItemCells,\n    DataListCell,\n    DataListItemRow,\n    Label,\n    PageSection,\n    PageSectionVariants,\n    Split,\n    SplitItem,\n    Stack,\n    StackItem,\n    Title,\n    DataListItem,\n} from '@patternfly/react-core';\n\nimport {\n    BitbucketIcon,\n    CubeIcon,\n    GitlabIcon,\n    LinkIcon,\n    OpenshiftIcon,\n    PaypalIcon,\n    UnlinkIcon,\n    FacebookIcon,\n    GoogleIcon,\n    InstagramIcon,\n    MicrosoftIcon,\n    TwitterIcon,\n    StackOverflowIcon,\n    LinkedinIcon,\n    GithubIcon\n} from '@patternfly/react-icons';\n\nimport {HttpResponse} from '../../account-service/account.service';\nimport {AccountServiceContext} from '../../account-service/AccountServiceContext';\nimport {Msg} from '../../widgets/Msg';\nimport {ContentPage} from '../ContentPage';\nimport {createRedirect} from '../../util/RedirectUri';\n\ninterface LinkedAccount {\n    connected: boolean;\n    social: boolean;\n    providerAlias: string;\n    providerName: string;\n    displayName: string;\n    linkedUsername: string;\n}\n\ninterface LinkedAccountsPageProps extends RouteComponentProps {\n}\n\ninterface LinkedAccountsPageState {\n    linkedAccounts: LinkedAccount[];\n    unLinkedAccounts: LinkedAccount[];\n}\n\n/**\n * @author Stan Silvert\n */\nclass LinkedAccountsPage extends React.Component<LinkedAccountsPageProps, LinkedAccountsPageState> {\n    static contextType = AccountServiceContext;\n    context: React.ContextType<typeof AccountServiceContext>;\n\n    public constructor(props: LinkedAccountsPageProps, context: React.ContextType<typeof AccountServiceContext>) {\n        super(props);\n        this.context = context;\n\n        this.state = {\n            linkedAccounts: [],\n            unLinkedAccounts: []\n        }\n\n        this.getLinkedAccounts();\n    }\n\n    private getLinkedAccounts(): void {\n        this.context!.doGet<LinkedAccount[]>(\"/linked-accounts\")\n            .then((response: HttpResponse<LinkedAccount[]>) => {\n                console.log({response});\n                const linkedAccounts = response.data!.filter((account) => account.connected);\n                const unLinkedAccounts = response.data!.filter((account) => !account.connected);\n                this.setState({linkedAccounts: linkedAccounts, unLinkedAccounts: unLinkedAccounts});\n            });\n    }\n\n    private unLinkAccount(account: LinkedAccount): void {\n        const url = '/linked-accounts/' + account.providerName;\n\n        this.context!.doDelete<void>(url)\n            .then((response: HttpResponse<void>) => {\n                console.log({response});\n                this.getLinkedAccounts();\n            });\n    }\n\n    private linkAccount(account: LinkedAccount): void {\n        const url = '/linked-accounts/' + account.providerName;\n\n        const redirectUri: string = createRedirect(this.props.location.pathname);\n\n        this.context!.doGet<{accountLinkUri: string}>(url, { params: {providerId: account.providerName, redirectUri}})\n            .then((response: HttpResponse<{accountLinkUri: string}>) => {\n                console.log({response});\n                window.location.href = response.data!.accountLinkUri;\n            });\n    }\n\n    public render(): React.ReactNode {\n\n        return (\n            <ContentPage title={Msg.localize('linkedAccountsTitle')} introMessage={Msg.localize('linkedAccountsIntroMessage')}>\n                <PageSection isFilled variant={PageSectionVariants.light}>\n                    <Stack hasGutter>\n                        <StackItem>\n                            <Title headingLevel=\"h2\" className=\"pf-u-mb-lg\" size='xl'>\n                                <Msg msgKey='linkedLoginProviders'/>\n                            </Title>\n                            <DataList id=\"linked-idps\" aria-label={Msg.localize('linkedLoginProviders')}>\n                                {this.makeRows(this.state.linkedAccounts, true)}\n                            </DataList>\n                        </StackItem>\n                        <StackItem>\n                            <Title headingLevel=\"h2\" className=\"pf-u-mt-xl pf-u-mb-lg\" size='xl'>\n                                <Msg msgKey='unlinkedLoginProviders'/>\n                            </Title>\n                            <DataList id=\"unlinked-idps\" aria-label={Msg.localize('unlinkedLoginProviders')}>\n                                {this.makeRows(this.state.unLinkedAccounts, false)}\n                            </DataList>\n                        </StackItem>\n                    </Stack>\n                </PageSection>\n            </ContentPage>\n        );\n    }\n\n    private emptyRow(isLinked: boolean): React.ReactNode {\n        let isEmptyMessage = '';\n        if (isLinked) {\n            isEmptyMessage = Msg.localize('linkedEmpty');\n        } else {\n            isEmptyMessage = Msg.localize('unlinkedEmpty');\n        }\n\n        return (\n            <DataListItem key='emptyItem' aria-labelledby={Msg.localize('isEmptyMessage')}>\n                <DataListItemRow key='emptyRow'>\n                    <DataListItemCells dataListCells={[\n                        <DataListCell key='empty'>{isEmptyMessage}</DataListCell>\n                    ]}/>\n                </DataListItemRow>\n            </DataListItem>\n        )\n    }\n\n    private makeRows(accounts: LinkedAccount[], isLinked: boolean): React.ReactNode {\n        if (accounts.length === 0) {\n            return this.emptyRow(isLinked);\n        }\n\n        return (\n            <> {\n\n                accounts.map( (account: LinkedAccount) => (\n                    <DataListItem id={`${account.providerAlias}-idp`} key={account.providerName} aria-labelledby={Msg.localize('linkedAccountsTitle')}>\n                        <DataListItemRow key={account.providerName}>\n                            <DataListItemCells\n                                dataListCells={[\n                                    <DataListCell key='idp'>\n                                        <Split>\n                                            <SplitItem className=\"pf-u-mr-sm\">{this.findIcon(account)}</SplitItem>\n                                            <SplitItem className=\"pf-u-my-xs\" isFilled><span id={`${account.providerAlias}-idp-name`}>{account.displayName}</span></SplitItem>\n                                        </Split>\n                                    </DataListCell>,\n                                    <DataListCell key='label'>\n                                        <Split>\n                                            <SplitItem className=\"pf-u-my-xs\" isFilled><span id={`${account.providerAlias}-idp-label`}>{this.label(account)}</span></SplitItem>\n                                        </Split>\n                                    </DataListCell>,\n                                    <DataListCell key='username' width={5}>\n                                        <Split>\n                                            <SplitItem className=\"pf-u-my-xs\" isFilled><span id={`${account.providerAlias}-idp-username`}>{account.linkedUsername}</span></SplitItem>\n                                        </Split>\n                                    </DataListCell>,\n                                ]}/>\n                            <DataListAction aria-labelledby={Msg.localize('link')} aria-label={Msg.localize('unLink')} id='setPasswordAction'>\n                                {isLinked && <Button id={`${account.providerAlias}-idp-unlink`} variant='link' onClick={() => this.unLinkAccount(account)}><UnlinkIcon size='sm'/> <Msg msgKey='unLink'/></Button>}\n                                {!isLinked && <Button id={`${account.providerAlias}-idp-link`} variant='link' onClick={() => this.linkAccount(account)}><LinkIcon size='sm'/> <Msg msgKey='link'/></Button>}\n                            </DataListAction>\n                        </DataListItemRow>\n                    </DataListItem>\n                ))\n\n            } </>\n\n        )\n    }\n\n    private label(account: LinkedAccount): React.ReactNode {\n        if (account.social) {\n            return (<Label color=\"blue\"><Msg msgKey='socialLogin'/></Label>);\n        }\n\n        return (<Label color=\"green\"><Msg msgKey='systemDefined'/></Label>);\n    }\n\n    private findIcon(account: LinkedAccount): React.ReactNode {\n      const socialIconId = `${account.providerAlias}-idp-icon-social`;\n      console.log(account);\n      switch (true) {\n        case account.providerName.toLowerCase().includes('linkedin'):\n          return <LinkedinIcon id={socialIconId} size='lg'/>;\n        case account.providerName.toLowerCase().includes('facebook'):\n          return <FacebookIcon id={socialIconId} size='lg'/>;\n        case account.providerName.toLowerCase().includes('google'):\n          return <GoogleIcon id={socialIconId} size='lg'/>;\n        case account.providerName.toLowerCase().includes('instagram'):\n          return <InstagramIcon id={socialIconId} size='lg'/>;\n        case account.providerName.toLowerCase().includes('microsoft'):\n          return <MicrosoftIcon id={socialIconId} size='lg'/>;\n        case account.providerName.toLowerCase().includes('bitbucket'):\n          return <BitbucketIcon id={socialIconId} size='lg'/>;\n        case account.providerName.toLowerCase().includes('twitter'):\n          return <TwitterIcon id={socialIconId} size='lg'/>;\n        case account.providerName.toLowerCase().includes('openshift'):\n          // return <div className=\"idp-icon-social\" id=\"openshift-idp-icon-social\" />;\n          return <OpenshiftIcon id={socialIconId} size='lg'/>;\n        case account.providerName.toLowerCase().includes('gitlab'):\n          return <GitlabIcon id={socialIconId} size='lg'/>;\n        case account.providerName.toLowerCase().includes('github'):\n          return <GithubIcon id={socialIconId} size='lg'/>;\n        case account.providerName.toLowerCase().includes('paypal'):\n          return <PaypalIcon id={socialIconId} size='lg'/>;\n        case account.providerName.toLowerCase().includes('stackoverflow'):\n          return <StackOverflowIcon id={socialIconId} size='lg'/>;\n        case (account.providerName !== '' && account.social):\n          return <div className=\"idp-icon-social\" id={socialIconId}/>;\n        default:\n          return <CubeIcon id={`${account.providerAlias}-idp-icon-default`} size='lg'/>;\n      }\n    }\n\n};\n\nconst LinkedAccountsPagewithRouter = withRouter(LinkedAccountsPage);\nexport {LinkedAccountsPagewithRouter as LinkedAccountsPage};\n"],"mappings":"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"}